

・デプス値を利用したグラデーション導入
　使い方が難しい上にパフォーマンス的なインパクトがでかい。コードの管理も難しい。
　ほとんど遊びのレベルになる

・ユーティリティとしてのローダクラス
　クラスにする必要があるのかも怪しいが、やっとくと使い方の幅は広がるかもしれない。
　アベレージとったりゼロパディングが楽になったり効率的だったりクリーンだったり。

・そろそろ本格的に公開を考えるべきフェーズに来てると思う。
　まぁAndroid版の作業が一通り終わったら相談するべきだな。

・普通の「並べて比較する」系統の棒グラフサポートに関して
　-> 複数属性のもの＊複数データ、と考えると、

ローダはどんなクラス構成というかモデルでやるべきか？
アプリケーションコードをどう書きたいか？

今回のそれでデリゲート＋ブロックの構成が一番綺麗に書けるのがわかったので踏襲するとして、
index -> value への変換をサポートしたり、ブロックにしたり、で分割したものを配列で渡す、というのが楽か？
そもそもシナリオの数が多すぎて、個別に対応するのはほぼ無理だ。
Rxの方がずっとシンプルに書けるかもしれない。
まぁ無理に当てはめると面倒な事になるので、手で書く。
最終的にはfloat x 2かCGPointが返せる必要があって、xyを混ぜるか分けるかでそれぞれメリットデメリットがある。
ただ、CGPointで返すくらいなら、手動で全部やれよって話なので、こっちを用意する必要性は低いと思う。
あと初めから分けときゃ跡はなんとでもなるし。
データの数（能動的なデータ）、xのデリゲート、yのデリゲート、で済むはず。
いや、まずは典型的なシナリオをまとめるところから始めるべき。

と、思ったんだが、なんだか雲行きが怪しい。
そもそも分割は現実的ではなくて、物事が逆に難しくなる。


