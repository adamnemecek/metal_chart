

・グラデーション、シャドウ、ボーダーの描画が全体的にサポートされてない
　本当に必要かという話もあるが、グラデーションとボーダーはあってもいいかもしれない
　棒は楽だが、折れ線はちょっと尋常じゃないほど難しい（重なる部分がとても複雑な事になる）
　グラデーションは指定方法が半端じゃなく多くて、シェーダ実装が見えてこない。つまり後回し。

・プロット領域の上に来るグリッド描画は実装優先度が最も高いが、効率的な実装方法は割と難しい。
　擬似的に目盛りを使う事もできるが、ビューのサイズを意識して設定してやる必要があって、割と大変だったりする.
　ただし別オブジェクトに分けると一貫性の維持が大変なので、もしもやるとすれば、軸にその機能をつけるのが自然である。

・目盛り同期のバグが残っている

・波線はちょっとちゃんとやりたいなーとおもってる。

背景領域のグリッドは別に軸と合わせる必要ない気がしてきた。
あとはあれか、プロット領域でマスクする系統の話。
仕組みとしてはやっぱりデプステストが候補なんだろうが、仕組み自体をすごくシンプルにしてしまったので、
下手に弄れないというのはある。

仕組み自体は共通で背景を特別扱いしないのに、それを考慮に入れた描画が必要になっている。
つまり、

・領域を複数に分けて、別々に把握できるようにする
・背景側が通知できるような仕組みを提供する

今、デプステストを使わないプリミティブがあることも問題だ。
始めは使わないならそれはそれで、くらいに考えていたが、こういう風になってくるとそうもいかない。
全てのプリミティブにデプステストを強制する。

次、なぜこう言った問題が起きるのか、その背景は何かと言えば、
矩形以外の方法で「領域を分割する」ためにはデプステストかステンシルテストが必要になるからだ。
基本的にはシザーテストで切っているが、角丸に合わせて内容も切り取るには、デプステストの導入が必須になる。
コストと見合っているかと言えば見合っていない気もするし、何かが正しくない感じはする。
そもそもデプスで管理するならシザーテストがいるのか的な感じにもなってくる。

・・・シザーテストやめる？
んーなんかその方が良い気がしてきた。
とすると、奥行きベースで整合性の取れたモデルを考える必要がある。

自然に、２方向へのデプスレンジの調整をする方法はなにか？満たすべき条件は、

・最低値は0
・プロットエリアを特別なものとして扱わない

できるだけ自然になるように実装はした、実際動いてる。
点描画だけがちゃんとサポートしていないんだが、これはプロット領域からはみ出ても良いんじゃないかという気もする。ので後回し。
グラデーションはデプスを使った描画が多分一番良い。
でも狙った通りの効果を出すのはすごく難しいし、GPUへの負荷も大きい。まぁあとでいい。

グリッド実装をやる。
基本的には、




