

・デプス値を利用したグラデーション導入
　使い方が難しい上にパフォーマンス的なインパクトがでかい。コードの管理も難しい。
　ほとんど遊びのレベルになる

・ユーティリティとしてのローダクラス
　クラスにする必要があるのかも怪しいが、やっとくと使い方の幅は広がるかもしれない。
　アベレージとったりゼロパディングが楽になったり効率的だったりクリーンだったり。

・そろそろ本格的に公開を考えるべきフェーズに来てると思う。
　まぁAndroid版の作業が一通り終わったら相談するべきだな。

・普通の「並べて比較する」系統の棒グラフサポートに関して
　-> そもそもこういうデータを見せるには、向いていない。
　　　目的が違うのだ。作っても良いが、少し違ったアプローチが必須と思われる。
　　　まず考えられる限り、最も多彩な装飾パターンに対応できるシェーダが必要になる。
　　　とは言っても、あとは「グラデーション」と「領域塗りつぶし」くらいだろうか。
　　　あと属性を切り替えられるようにする仕組みも必要。

・もう一回チャートの可能な種類を揃えて、根本からオーバホールする？
　まぁこっちは趣味だし、それでもいいかもしれない。
　projectionだけちょっと浮いてるというか、コアクラスに混ぜると面倒な事になりがちなんだよね。
　いや、違うな。この構成にはそれ相応の意味があって、データと見えかたを切り離す意味がちゃんとあった。
　プロジェクションの種類が違うのなら一つのチャートに収めるのは実際まちがっているのだから、
　これは「名前の付け方がまちがっている」のと「一般クラスの欠如」が招いているって事になると思われる。
　ただ一般的なチャートを定義したところでたいしてメリットもないのではって感じはする。

・帯、ヒストグラム、積み上げ棒グラフは普通に既存の仕組みで組み込めるが、
　仮に円グラフ、パイチャート、レーダーチャートを使う場合、極座標変換が確実に必要になってくる
　それ自体はたいして難しくもないのだが、既存のグラフとの共存は確かに問題だ。
　アタッチメントすら共有できないという悲しい結果に。でもま、やりたいならそれくらいやるでしょ。

ローダはどんなクラス構成というかモデルでやるべきか？
アプリケーションコードをどう書きたいか？

・アベレージがどうのとかはサポートしても良い気がする。


